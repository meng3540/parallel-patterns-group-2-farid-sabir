#include <stdio.h>
#include <stdlib.h>
#include <cuda_runtime.h>
#include <time.h>

#define TILE_SIZE 1024
#define min(a,b) ((a)<(b)?(a):(b))
#define max(a,b) ((a)>(b)?(a):(b))

__device__ int co_rank_circular(int k, int* A, int m, int* B, int n, int A_S_start, int B_S_start, int tile_size) {
    int i = min(k, m);
    int j = k - i;
    int i_low = max(0, k - n);
    int j_low = k - i_low;

    while (1) {
        int i_cir = (A_S_start + i) % tile_size;
        int j_cir = (B_S_start + j) % tile_size;
        int i_m1_cir = (A_S_start + i - 1 + tile_size) % tile_size;
        int j_m1_cir = (B_S_start + j - 1 + tile_size) % tile_size;

        // Check bounds
        if (i >= 0 && j >= 0 && i < m && j < n) {
            if (i > 0 && j < n && A[i_m1_cir] > B[j_cir]) {
                int delta = (i - i_low + 1) >> 1;
                i -= delta;
                j += delta;
            }
            else if (j > 0 && i < m && B[j_m1_cir] >= A[i_cir]) {
                int delta = (j - j_low + 1) >> 1;
                j -= delta;
                i += delta;
            }
            else {
                return i;
            }
        }
        else {
            return i;  // Prevent going out of bounds
        }
    }
}

__device__ void merge_sequential_circular(int* A, int m, int* B, int n, int* C, int A_S_start, int B_S_start, int tile_size) {
    int i = 0, j = 0, k = 0;
    while (i < m && j < n) {
        int i_cir = (A_S_start + i) % tile_size;
        int j_cir = (B_S_start + j) % tile_size;
        if (A[i_cir] <= B[j_cir]) C[k++] = A[i_cir], i++;
        else C[k++] = B[j_cir], j++;
    }
    while (i < m) {
        int i_cir = (A_S_start + i) % tile_size;
        C[k++] = A[i_cir]; i++;
    }
    while (j < n) {
        int j_cir = (B_S_start + j) % tile_size;
        C[k++] = B[j_cir]; j++;
    }
}

__global__ void merge_optimized_kernel(int* A, int m, int* B, int n, int* C, int tile_size) {
    extern __shared__ int shareAB[];
    int* A_S = &shareAB[0];
    int* B_S = &shareAB[tile_size];

    int C_curr = blockIdx.x * ((m + n + gridDim.x - 1) / gridDim.x);
    int C_next = min((blockIdx.x + 1) * ((m + n + gridDim.x - 1) / gridDim.x), m + n);

    if (threadIdx.x == 0) {
        shareAB[0] = co_rank_circular(C_curr, A, m, B, n, 0, 0, tile_size);
        shareAB[1] = co_rank_circular(C_next, A, m, B, n, 0, 0, tile_size);
    }
    __syncthreads();

    int A_curr = shareAB[0];
    int A_next = shareAB[1];
    int B_curr = C_curr - A_curr;
    int B_next = C_next - A_next;

    int A_length = A_next - A_curr;
    int B_length = B_next - B_curr;
    int C_length = C_next - C_curr;

    int A_consumed = 0, B_consumed = 0, C_completed = 0;
    int A_S_start = 0, B_S_start = 0;
    int counter = 0;
    int total_iterations = (C_length + tile_size - 1) / tile_size;

    while (counter < total_iterations) {
        // Load A_S
        for (int i = 0; i < tile_size; i += blockDim.x) {
            int idx = i + threadIdx.x;
            if (idx < A_length - A_consumed) {
                A_S[(A_S_start + idx) % tile_size] = A[A_curr + A_consumed + idx];
            }
        }
        // Load B_S
        for (int i = 0; i < tile_size; i += blockDim.x) {
            int idx = i + threadIdx.x;
            if (idx < B_length - B_consumed) {
                B_S[(B_S_start + idx) % tile_size] = B[B_curr + B_consumed + idx];
            }
        }
        __syncthreads();

        int c_curr = threadIdx.x * (tile_size / blockDim.x);
        int c_next = (threadIdx.x + 1) * (tile_size / blockDim.x);
        c_curr = min(c_curr, C_length - C_completed);
        c_next = min(c_next, C_length - C_completed);

        int a_curr = co_rank_circular(c_curr, A_S, min(tile_size, A_length - A_consumed), B_S, min(tile_size, B_length - B_consumed), A_S_start, B_S_start, tile_size);
        int a_next = co_rank_circular(c_next, A_S, min(tile_size, A_length - A_consumed), B_S, min(tile_size, B_length - B_consumed), A_S_start, B_S_start, tile_size);
        int b_curr = c_curr - a_curr;
        int b_next = c_next - a_next;

        merge_sequential_circular(
            A_S, a_next - a_curr,
            B_S, b_next - b_curr,
            &C[C_curr + C_completed + c_curr],
            A_S_start + a_curr,
            B_S_start + b_curr,
            tile_size);

        counter++;
        int A_S_consumed = co_rank_circular(min(tile_size, C_length - C_completed),
            A_S, min(tile_size, A_length - A_consumed),
            B_S, min(tile_size, B_length - B_consumed),
            A_S_start, B_S_start, tile_size);

        int B_S_consumed = min(tile_size, C_length - C_completed) - A_S_consumed;

        A_consumed += A_S_consumed;
        B_consumed += B_S_consumed;
        C_completed += A_S_consumed + B_S_consumed;

        A_S_start = (A_S_start + A_S_consumed) % tile_size;
        B_S_start = (B_S_start + B_S_consumed) % tile_size;
        __syncthreads();
    }
}

int main() {
    const int m = 1 << 20;
    const int n = 1 << 20;
    const int total = m + n;

    int* h_A = (int*)malloc(m * sizeof(int));
    int* h_B = (int*)malloc(n * sizeof(int));
    int* h_C = (int*)malloc(total * sizeof(int));

    for (int i = 0; i < m; i++) h_A[i] = 2 * i;
    for (int i = 0; i < n; i++) h_B[i] = 2 * i + 1;

    int* d_A, * d_B, * d_C;
    cudaMalloc(&d_A, m * sizeof(int));
    cudaMalloc(&d_B, n * sizeof(int));
    cudaMalloc(&d_C, total * sizeof(int));

    cudaMemcpy(d_A, h_A, m * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_B, h_B, n * sizeof(int), cudaMemcpyHostToDevice);


    clock_t start = clock();
    merge_optimized_kernel << <128, 256, 2 * TILE_SIZE * sizeof(int) >> > (d_A, m, d_B, n, d_C, TILE_SIZE);


    cudaDeviceSynchronize();
    clock_t end = clock();

    cudaMemcpy(h_C, d_C, total * sizeof(int), cudaMemcpyDeviceToHost);



    double duration_ms = 1000.0 * (end - start) / CLOCKS_PER_SEC;
    double bandwidth = (3.0 * total * sizeof(int)) / (duration_ms * 1e6);

    printf("Execution time (ms): %.3f\n", duration_ms);
    printf("Effective Memory Bandwidth: %.3f GB/s\n", bandwidth);

    free(h_A);
    free(h_B);
    free(h_C);
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);

    return 0;
}

